# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Flutter CI # Workflow name made more descriptive

on:
  push:
    branches: [ "main", "master" ] # Added master branch
  pull_request:
    branches: [ "main", "master" ] # Added master branch

jobs:
  build:
    runs-on: ubuntu-latest # Can also use macOS or Windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # IMPORTANT: Replaced dart-lang/setup-dart action
      # with subosito/flutter-action.
      # This will install both Flutter SDK and Dart SDK.
      - name: Set up Flutter SDK # Step name made more descriptive
        uses: subosito/flutter-action@v2 # Using this action
        with:
          # Specify the Flutter version your project uses here.
          # You can also use 'stable' to always get the latest stable version.
          flutter-version: '3.32.7' # Changed to a more realistic stable version
          channel: 'stable' # 'stable' is commonly used

      # Added this step to diagnose the Flutter environment.
      # The output will help us understand why 'format' command is not found.
      - name: Diagnose Flutter environment
        run: flutter doctor -v

      - name: Install dependencies
        # 'flutter' command will now be available
        run: flutter pub get

      # Using 'flutter format' is more common for Flutter projects
      # instead of 'dart format'.
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      # Using 'flutter analyze' is more common for Flutter projects
      # instead of 'dart analyze'.
      # Adding '--fatal-infos' treats info-level warnings as errors.
      - name: Analyze project source
        run: flutter analyze --fatal-infos # Use flutter analyze for Flutter projects

      # For Flutter projects, 'flutter test' is used to run tests.
      - name: Run tests
        run: flutter test # Use flutter test for Flutter projects

      # Optional: Steps to build the example app (if it exists)
      # This ensures your library's example app runs smoothly.
      # You can remove these steps if you don't have an 'example' folder.
      - name: Build example app (Android)
        if: success() && contains(github.workspace, 'example')
        run: |
          cd example
          flutter build apk --debug

      - name: Build example app (Web)
        if: success() && contains(github.workspace, 'example')
        run: |
          cd example
          flutter build web

      # Optional: Pre-publish check (before uploading to pub.dev)
      # NOTE: 'flutter pub publish --dry-run' is used instead of 'dart pub publish --dry-run'.
      - name: Check for publish warnings (Optional)
        run: flutter pub publish --dry-run # Use flutter pub publish for Flutter projects
